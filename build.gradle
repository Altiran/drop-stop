import java.text.SimpleDateFormat

plugins {
    // Java plugin for Java projects.
    id 'java'

    // Checkstyle plugin for code style checking.
    id 'checkstyle'

    // SpotBugs plugin for static analysis.
    id 'com.github.spotbugs' version '6.1.3'

    // Shadow plugin for creating fat JARs.
    id 'io.github.goooler.shadow' version '8.1.8'
}

// Group ID for the project.
group = 'com.altiran.dropstop'

// Get the current time in UTC in the format 'yyMMdd-HHmm'.
static def getTime() {
    SimpleDateFormat sdf = new SimpleDateFormat('yyMMdd-HHmm')
    sdf.setTimeZone(TimeZone.getTimeZone('UTC'))
    return sdf.format(new Date()).toString()
}

// Set version to version property if supplied via 'gradle.properties' file or generate a timestamped version.
String shortVersion = null
if (hasProperty('projectVersion')) {
    if (projectVersion.charAt(0) == (char) 'v') {
        shortVersion = projectVersion.substring(1).toUpperCase()
    } else {
        shortVersion = projectVersion.toUpperCase()
    }
}

// If the tag includes '-RC-' or no tag is supplied, append '-SNAPSHOT' to the version.
int rcIdx
if (shortVersion == null || shortVersion == '') {
    version = getTime() + '-SNAPSHOT'
} else if ((rcIdx = shortVersion.indexOf('-RC-')) != -1) {
    version = shortVersion.substring(0, rcIdx) + '-SNAPSHOT'
} else {
    version = shortVersion
}

// Get the compatible Java version from 'gradle.properties' file.
def targetJavaVersion = Integer.valueOf(javaVersion)

// Set the Java version for the project.
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

// Define the repositories to use for dependencies.
repositories {
    // PaperMC Maven repository.
    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
        content {
            includeModule('io.papermc.paper', 'paper-api')
            includeModule('io.papermc', 'paperlib')
            includeModule('net.md-5', 'bungeecord-chat')
        }
    }

    // Minecraft Maven repository.
    maven {
        name 'minecraft'
        url 'https://libraries.minecraft.net'
        content {
            includeModule('com.mojang', 'brigadier')
        }
    }

    // SpigotMC Maven repository.
    maven {
        name 'spigotmc'
        url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots'
    }

    // Sonatype Maven repository.
    maven {
        name 'sonatype'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    // JitPack Maven repository.
    maven {
        name 'jitpack'
        url 'https://jitpack.io'
    }

    // Concurrentia Maven repository.
    maven {
        name 'concurrentia'
        url 'https://raw.githubusercontent.com/Altiran/concurrentia/main/repo'
    }

    // JCenter Maven repository.
    mavenCentral()
}

// Define the project dependencies.
dependencies {
    /*******************************************
     * MINECRAFT VERSION-SPECIFIC DEPENDENCIES *
     *******************************************/

    // Paper API for compilation only. The server will provide the implementation at runtime.
    compileOnly 'io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT'

    // MockBukkit
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.20:3.93.2'


    /********************************
     * PLUGIN-SPECIFIC DEPENDENCIES *
     ********************************/

    // Only for suggesting PaperMC in server log messages (optional).
    implementation 'io.papermc:paperlib:1.0.8'

    // Jakarta Annotation API
    compileOnly 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    // SpotBugs for static analysis (only at compile time and testing).
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.1'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.1'
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.13.0'

    // Concurrentia for asynchronous tests.
    testImplementation 'com.altiran:concurrentia:1.0.3'

    // SLF4J for testing only. The server will provide the implementation at runtime.
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'

    // JUnit Jupiter API provides the classes and methods necessary to write tests.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.4'

    // JUnit Platform to discover, filter, and execute tests.
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Configure the test task.
test {
    // Use JUnit Platform for running tests.
    useJUnitPlatform()

    // Always run tests. Never skip them even if they are up-to-date.
    outputs.upToDateWhen { false }
}

// Configure processing of resources when building the project.
processResources {
    // Only include resources with UTF-8 encoding.
    filteringCharset 'UTF-8'

    // Inject the project name, version, and package into the plugin.yml file.
    filesMatching('**/plugin.yml') {
        expand(NAME: rootProject.name, VERSION: version, PACKAGE: project.group.toString())
    }
}

// Configure the Checkstyle plugin.
checkstyle {
    // Checkstyle version to use.
    toolVersion '10.21.2'

    // No limit on the number of warnings.
    maxWarnings = 0
}

// Configure the Checkstyle task.
configurations.checkstyle {
    // Use Google Guava instead of Google Collections.
    resolutionStrategy.capabilitiesResolution.withCapability('com.google.collections:google-collections') {
        select('com.google.guava:guava:33.4.0-jre')
    }
}

// Configure the SpotBugs plugin.
spotbugs {
    // Specify the SpotBugs exclusion filter file.
    excludeFilter = file('./config/spotbugs/spotbugs.xml')
}

// Configure Shadow plugin.
shadowJar {
    // Don't append anything to the final JAR name.
    archiveClassifier.set('' as String)

    // Relocate PaperLib classes to avoid conflicts.
    relocate 'io.papermc.lib', 'shadow.io.papermc.paperlib'

    // Remove unused classes from the final JAR.
    minimize()
}

// Disable JAR task.
jar.enabled = false

// Replace with shadowJar task instead.
assemble.dependsOn(shadowJar)

// Define custom print project name task.
tasks.register('printProjectName') {
    // Print the project name when the task is executed.
    doLast {
        println rootProject.name
    }
}

// Define custom release task.
tasks.register('release') {
    // Build the project before releasing.
    dependsOn build

    doLast {
        if (!version.endsWith('-SNAPSHOT')) {
            // Rename final JAR to trim off version information
            shadowJar.archiveFile.get().getAsFile().renameTo(layout.buildDirectory.get().toString() + File.separator + 'libs' + File.separator + rootProject.name + '.jar')
        }
    }
}

// Configure the JavaCompile task.
tasks.withType(JavaCompile).configureEach {
    // Set the encoding to UTF-8.
    options.encoding = 'UTF-8'

    // Set the Java version to the target Java version if it is Java 10 or higher.
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}
